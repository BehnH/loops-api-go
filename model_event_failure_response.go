/*
Loops OpenAPI Spec

This is the OpenAPI Spec for the [Loops API](https://loops.so/docs/api).

API version: 1.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loops

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventFailureResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventFailureResponse{}

// EventFailureResponse struct for EventFailureResponse
type EventFailureResponse struct {
	Success bool `json:"success"`
	Message string `json:"message"`
}

type _EventFailureResponse EventFailureResponse

// NewEventFailureResponse instantiates a new EventFailureResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventFailureResponse(success bool, message string) *EventFailureResponse {
	this := EventFailureResponse{}
	this.Success = success
	this.Message = message
	return &this
}

// NewEventFailureResponseWithDefaults instantiates a new EventFailureResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventFailureResponseWithDefaults() *EventFailureResponse {
	this := EventFailureResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *EventFailureResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *EventFailureResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *EventFailureResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetMessage returns the Message field value
func (o *EventFailureResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *EventFailureResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *EventFailureResponse) SetMessage(v string) {
	o.Message = v
}

func (o EventFailureResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventFailureResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *EventFailureResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventFailureResponse := _EventFailureResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventFailureResponse)

	if err != nil {
		return err
	}

	*o = EventFailureResponse(varEventFailureResponse)

	return err
}

type NullableEventFailureResponse struct {
	value *EventFailureResponse
	isSet bool
}

func (v NullableEventFailureResponse) Get() *EventFailureResponse {
	return v.value
}

func (v *NullableEventFailureResponse) Set(val *EventFailureResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventFailureResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventFailureResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventFailureResponse(val *EventFailureResponse) *NullableEventFailureResponse {
	return &NullableEventFailureResponse{value: val, isSet: true}
}

func (v NullableEventFailureResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventFailureResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


