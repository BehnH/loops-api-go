/*
Loops OpenAPI Spec

This is the OpenAPI Spec for the [Loops API](https://loops.so/docs/api).

API version: 1.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loops

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MailingList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailingList{}

// MailingList struct for MailingList
type MailingList struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Description string `json:"description"`
	IsPublic bool `json:"isPublic"`
}

type _MailingList MailingList

// NewMailingList instantiates a new MailingList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailingList(id string, name string, description string, isPublic bool) *MailingList {
	this := MailingList{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.IsPublic = isPublic
	return &this
}

// NewMailingListWithDefaults instantiates a new MailingList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailingListWithDefaults() *MailingList {
	this := MailingList{}
	return &this
}

// GetId returns the Id field value
func (o *MailingList) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MailingList) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MailingList) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MailingList) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MailingList) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MailingList) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *MailingList) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MailingList) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MailingList) SetDescription(v string) {
	o.Description = v
}

// GetIsPublic returns the IsPublic field value
func (o *MailingList) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *MailingList) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *MailingList) SetIsPublic(v bool) {
	o.IsPublic = v
}

func (o MailingList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailingList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["isPublic"] = o.IsPublic
	return toSerialize, nil
}

func (o *MailingList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"isPublic",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMailingList := _MailingList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMailingList)

	if err != nil {
		return err
	}

	*o = MailingList(varMailingList)

	return err
}

type NullableMailingList struct {
	value *MailingList
	isSet bool
}

func (v NullableMailingList) Get() *MailingList {
	return v.value
}

func (v *NullableMailingList) Set(val *MailingList) {
	v.value = val
	v.isSet = true
}

func (v NullableMailingList) IsSet() bool {
	return v.isSet
}

func (v *NullableMailingList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailingList(val *MailingList) *NullableMailingList {
	return &NullableMailingList{value: val, isSet: true}
}

func (v NullableMailingList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailingList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


